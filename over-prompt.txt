I recently made a university chatbot by using React +VITE, Flask and Gemini API(Which is written in Python) but it lack some functionalities. So Can you add animations and functionalities for the Sidebar as well Like If we click on New Chat Then the new chat box should appear, In the Recent section The Previous chats should appear and it can be renamed and can be deleted by the user, The Help button should display About the University on the Main section, The Activity Button should Display the Prompt History of the user with date and time and the user should be able to delete the Prompt in that section, And the Settings Button should be able to control Dark mode or Light mode. After That in the input box I want you to Add Speech to Text functionality(or mic functionality) by clicking the mic button and Add the functionality to upload the files and images by clicking the gallery button and Can you tell me that which dependencies or tools do I have to install and how to install it

Since I've been done some adjustments in some files so I don't want you to change any of these files 

Here are the files that I have been adjusted :-

This is the Sidebar.jsx file :-

import React, { useState, useEffect } from 'react';
import './Sidebar.css';
import { assets } from '../../assets/assets';

const Sidebar = ({ setChatHistory, setCurrentChat, setActiveSection, darkMode, setDarkMode }) => {
  const [extended, setExtended] = useState(false);
  const [chats, setChats] = useState([]);
  const [editingChat, setEditingChat] = useState(null);
  const [editValue, setEditValue] = useState('');

  // Load chats from localStorage on component mount
  useEffect(() => {
    const savedChats = JSON.parse(localStorage.getItem('chatHistory')) || [];
    setChats(savedChats);
  }, []);

  // Save chats to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem('chatHistory', JSON.stringify(chats));
  }, [chats]);

  const createNewChat = () => {
    const newChat = {
      id: Date.now(),
      title: 'New Chat',
      messages: [],
      timestamp: new Date().toISOString()
    };
    
    setChats([newChat, ...chats]);
    setCurrentChat(newChat);
    setChatHistory([]);
    setActiveSection('chat');
  };

  const selectChat = (chat) => {
    setCurrentChat(chat);
    setChatHistory(chat.messages);
    setActiveSection('chat');
  };

  const deleteChat = (e, chatId) => {
    e.stopPropagation();
    setChats(chats.filter(chat => chat.id !== chatId));
    
    // If the deleted chat was the current one, create a new empty chat
    const currentChat = JSON.parse(localStorage.getItem('currentChat'));
    if (currentChat && currentChat.id === chatId) {
      createNewChat();
    }
  };

  const startRenameChat = (e, chat) => {
    e.stopPropagation();
    setEditingChat(chat.id);
    setEditValue(chat.title);
  };

  const finishRenameChat = () => {
    if (editingChat) {
      setChats(chats.map(chat => 
        chat.id === editingChat ? {...chat, title: editValue || 'Untitled Chat'} : chat
      ));
      setEditingChat(null);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      finishRenameChat();
    }
  };

  const showHelp = () => {
    setActiveSection('help');
  };

  const showActivity = () => {
    setActiveSection('activity');
  };

  const showSettings = () => {
    setActiveSection('settings');
  };

  return (
    <div className={`sidebar ${extended ? 'extended' : ''}`}>
      <div className="top">
        <img 
          onClick={() => setExtended(prev => !prev)} 
          className="menu" 
          src={assets.menu_icon} 
          alt=""
        />
        <div className="new-chat" onClick={createNewChat}>
          <img src={assets.plus_icon} alt="New Chat" />
          {extended ? <p>New Chat</p> : null} 
        </div>
        {extended ? (
          <div className="recent">
            <p className="recent-title">Recent</p>
            {chats.length > 0 ? (
              chats.map(chat => (
                <div 
                  key={chat.id} 
                  className="recent-entry"
                  onClick={() => selectChat(chat)}
                >
                  <img src={assets.message_icon} alt="" />
                  {editingChat === chat.id ? (
                    <input
                      type="text"
                      value={editValue}
                      onChange={(e) => setEditValue(e.target.value)}
                      onBlur={finishRenameChat}
                      onKeyPress={handleKeyPress}
                      autoFocus
                      className="edit-input"
                    />
                  ) : (
                    <p>{chat.title}</p>
                  )}
                  <div className="chat-actions">
                    <img 
                      src={assets.edit_icon || assets.info_icon} 
                      alt="Rename" 
                      onClick={(e) => startRenameChat(e, chat)} 
                      className="action-icon"
                    />
                    <img 
                      src={assets.delete_icon || assets.setting_icon} 
                      alt="Delete" 
                      onClick={(e) => deleteChat(e, chat.id)}
                      className="action-icon"
                    />
                  </div>
                </div>
              ))
            ) : (
              <div className="empty-state">
                <p>No recent chats</p>
              </div>
            )}
          </div>
        ) : null}
      </div>
      
      <div className="bottom">
        <div className="bottom-item recent-entry" onClick={showHelp}>
          <img src={assets.info_icon} alt="About" />
          {extended ? <p>Help</p> : null}
        </div>
        <div className="bottom-item recent-entry" onClick={showActivity}>
          <img src={assets.history_icon} alt="Activity" />
          {extended ? <p>Activity</p> : null}
        </div>
        <div className="bottom-item recent-entry" onClick={showSettings}>
          <img src={assets.setting_icon} alt="Settings" />
          {extended ? <p>Settings</p> : null}
        </div>
      </div>
    </div>
  );
};

export default Sidebar;

This is the Sidebar.css file :-

.sidebar{
    min-height: 100vh;
    display: inline-flex;
    flex-direction: column;
    justify-content: space-between;
    background-color: #f0f4f9;
    padding: 25px 15px;
    transition: all 0.3s ease;
    width: 70px;
}

.sidebar.extended {
    width: 260px;
}

.sidebar img{
    width: 20px;
}

.sidebar .menu{
    display: block;
    margin-left: 10px;
    cursor: pointer;
    transition: transform 0.3s ease;
}

.sidebar .menu:hover {
    transform: rotate(180deg);
}

.sidebar .new-chat{
    margin-top: 50px;
    display: inline-flex;
    align-items: center;
    gap: 10px;
    padding: 10px 15px;
    background-color: #e6eaf1;
    border-radius: 50px;
    font-size: 14px;
    color: grey;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.sidebar .new-chat:hover {
    background-color: #d5dbe6;
    transform: translateY(-2px);
}

.sidebar .recent{
    display: flex;
    flex-direction: column;
    max-height: 50vh;
    overflow-y: auto;
}

.sidebar .recent-title{
    margin-top: 30px;
    margin-bottom: 20px;
    font-weight: 500;
    color: #555;
}

.sidebar .recent-entry{
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px;
    border-radius: 10px;
    color: #282828;
    cursor: pointer;
    position: relative;
    transition: background-color 0.2s ease;
}

.sidebar .recent-entry:hover{
    background-color: #e2e6eb;
}

.sidebar .recent-entry.active {
    background-color: #dae5f5;
    font-weight: bold;
}

.sidebar .bottom{
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.sidebar .bottom-item{
    padding: 10px;
    cursor: pointer;
    border-radius: 10px;
    transition: background-color 0.2s ease;
}

.sidebar .bottom-item:hover {
    background-color: #e2e6eb;
}

.sidebar .chat-actions {
    display: none;
    position: absolute;
    right: 10px;
    gap: 8px;
}

.sidebar .recent-entry:hover .chat-actions {
    display: flex;
}

.sidebar .action-icon {
    padding: 4px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.7);
    transition: background-color 0.2s ease;
}

.sidebar .action-icon:hover {
    background-color: rgba(255, 255, 255, 1);
}

.sidebar .edit-input {
    flex: 1;
    background: transparent;
    border: none;
    border-bottom: 1px solid #aaa;
    outline: none;
    font-size: 14px;
    padding: 2px 0;
}

.sidebar .empty-state {
    text-align: center;
    color: #888;
    padding: 20px 0;
    font-style: italic;
}

/* Dark mode styles */
.dark-mode .sidebar {
    background-color: #1f2937;
    color: #e5e7eb;
}

.dark-mode .sidebar .new-chat {
    background-color: #374151;
    color: #e5e7eb;
}

.dark-mode .sidebar .new-chat:hover {
    background-color: #4b5563;
}

.dark-mode .sidebar .recent-entry {
    color: #e5e7eb;
}

.dark-mode .sidebar .recent-entry:hover {
    background-color: #374151;
}

.dark-mode .sidebar .recent-entry.active {
    background-color: #3b82f6;
}

.dark-mode .sidebar .action-icon {
    background-color: rgba(75, 85, 99, 0.7);
}

.dark-mode .sidebar .action-icon:hover {
    background-color: rgba(75, 85, 99, 1);
}

This is the Main.jsx file :-

import React, { useState, useRef, useEffect } from 'react';
import './Main.css';
import { assets } from '../../assets/assets';
import axios from 'axios';
import UniversityInfo from '../UniversityInfo/UniversityInfo';
import ActivityLog from '../ActivityLog/ActivityLog';
import Settings from '../Settings/Settings';

const Main = ({ 
  activeSection, 
  chatHistory, 
  setChatHistory, 
  currentChat, 
  setCurrentChat,
  darkMode
}) => {
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const messagesEndRef = useRef(null);
  const [showGreeting, setShowGreeting] = useState(true);
  const fileInputRef = useRef(null);
  const [selectedFile, setSelectedFile] = useState(null);
  
  // For speech recognition
  const recognitionRef = useRef(null);

  // Initialize speech recognition
  useEffect(() => {
    if ("webkitSpeechRecognition" in window || "SpeechRecognition" in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = true;
      recognitionRef.current.interimResults = true;
      
      recognitionRef.current.onresult = (event) => {
        const transcript = Array.from(event.results)
          .map(result => result[0])
          .map(result => result.transcript)
          .join('');
        
        setInput(transcript);
      };
      
      recognitionRef.current.onerror = (event) => {
        console.error('Speech recognition error', event.error);
        setIsRecording(false);
      };
    }

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };
  }, []);

  // Function to handle sending messages
  const handleSendMessage = async () => {
    if (input.trim() === '' && !selectedFile) return;
    
    // Add user message to chat
    const userMessage = {
      text: input,
      sender: 'user',
      timestamp: new Date().toISOString(),
      file: selectedFile ? {
        name: selectedFile.name,
        type: selectedFile.type,
        // For real implementation, you would handle file upload properly
        // This is just a placeholder for the UI
        preview: selectedFile.type.startsWith('image/') ? URL.createObjectURL(selectedFile) : null
      } : null
    };
    
    const newChatHistory = [...chatHistory, userMessage];
    setChatHistory(newChatHistory);
    
    // Update currentChat in state and localStorage
    if (currentChat) {
      const updatedChat = {
        ...currentChat,
        messages: newChatHistory,
        title: currentChat.title === 'New Chat' && input.length > 0 
          ? input.substring(0, 30) + (input.length > 30 ? '...' : '')
          : currentChat.title
      };
      setCurrentChat(updatedChat);
      
      // Update the chat in localStorage
      const savedChats = JSON.parse(localStorage.getItem('chatHistory')) || [];
      const updatedChats = savedChats.map(chat => 
        chat.id === updatedChat.id ? updatedChat : chat
      );
      localStorage.setItem('chatHistory', JSON.stringify(updatedChats));
      localStorage.setItem('currentChat', JSON.stringify(updatedChat));
    }
    
    setInput('');
    setSelectedFile(null);
    setShowGreeting(false);
    setLoading(true);
    
    try {
      // Add file to FormData if present
      let requestData = {
        message: input
      };
      
      // If we had file upload capability with the backend
      // const formData = new FormData();
      // formData.append('message', input);
      // if (selectedFile) {
      //   formData.append('file', selectedFile);
      // }
      
      // Send request to backend
      const response = await axios.post('http://127.0.0.1:5000/api/chat', requestData);
      
      // Add bot response to chat
      if (response.data.response) {
        const botMessage = {
          text: response.data.response,
          sender: 'bot',
          timestamp: new Date().toISOString()
        };
        
        const updatedChatHistory = [...newChatHistory, botMessage];
        setChatHistory(updatedChatHistory);
        
        // Update the current chat with the bot's response
        if (currentChat) {
          const updatedChat = {
            ...currentChat,
            messages: updatedChatHistory
          };
          setCurrentChat(updatedChat);
          
          // Update in localStorage
          const savedChats = JSON.parse(localStorage.getItem('chatHistory')) || [];
          const updatedChats = savedChats.map(chat => 
            chat.id === updatedChat.id ? updatedChat : chat
          );
          localStorage.setItem('chatHistory', JSON.stringify(updatedChats));
          localStorage.setItem('currentChat', JSON.stringify(updatedChat));
        }
        
        // Also save to activity log
        const activityLog = JSON.parse(localStorage.getItem('activityLog')) || [];
        activityLog.push({
          query: input,
          response: response.data.response,
          timestamp: new Date().toISOString()
        });
        localStorage.setItem('activityLog', JSON.stringify(activityLog));
        
      } else if (response.data.error) {
        const errorMessage = {
          text: `Sorry, there was an error: ${response.data.error}`,
          sender: 'bot',
          timestamp: new Date().toISOString()
        };
        setChatHistory([...newChatHistory, errorMessage]);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage = {
        text: 'Sorry, there was an error connecting to the server. Please try again later.',
        sender: 'bot',
        timestamp: new Date().toISOString()
      };
      setChatHistory([...newChatHistory, errorMessage]);
    } finally {
      setLoading(false);
    }
  };

  // Toggle speech recognition
  const toggleSpeechRecognition = () => {
    if (isRecording) {
      recognitionRef.current.stop();
      setIsRecording(false);
    } else {
      recognitionRef.current.start();
      setIsRecording(true);
    }
  };

  // Handle file selection
  const handleFileSelect = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setSelectedFile(e.target.files[0]);
    }
  };

  // Handle Enter key press
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  // Handle clicking on suggestion cards
  const handleCardClick = (suggestion) => {
    setInput(suggestion);
    // Optional: auto-send the suggestion
    // setInput(suggestion);
    // setTimeout(() => handleSendMessage(), 100);
  };
  
  // Auto-scroll to bottom of messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatHistory]);

  // Render different sections based on activeSection prop
  if (activeSection === 'help') {
    return <UniversityInfo />;
  }
  
  if (activeSection === 'activity') {
    return <ActivityLog />;
  }
  
  if (activeSection === 'settings') {
    return <Settings />;
  }

  return (
    <div className={`main ${darkMode ? 'dark-mode' : ''}`}>
      <div className="nav">
        <p>SGSU Bot BETA</p>
        <img src={assets.user_icon} alt="" />
      </div>
      <div className="main-container">
        {showGreeting && chatHistory.length === 0 ? (
          <>
            <div className="greet">
              <p><span>Hello, Karthik.</span></p>
              <p>How can I help you Today?</p>
            </div>
            <div className="cards">
              <div className="card" onClick={() => handleCardClick("What are the eligibility criteria for admission to different programs at your college?")}>
                <p>What are the eligibility criteria for admission to different programs at your college?</p>
                <img src={assets.compass_icon} alt="" />
              </div>
              <div className="card" onClick={() => handleCardClick("What is the fee structure, and are there any scholarship opportunities available?")}>
                <p>What is the fee structure, and are there any scholarship opportunities available?</p>
                <img src={assets.bulb_icon} alt="" />
              </div>
              <div className="card" onClick={() => handleCardClick("How does the college support students in skill development and career growth?")}>
                <p>How does the college support students in skill development and career growth?</p>
                <img src={assets.message_icon} alt="" />
              </div>
              <div className="card" onClick={() => handleCardClick("What are the hostel facilities and other campus amenities available for students?")}>
                <p>What are the hostel facilities and other campus amenities available for students?</p>
                <img src={assets.code_icon} alt="" />
              </div>
            </div>
          </>
        ) : (
          <div className="messages-container">
            {chatHistory.map((message, index) => (
              <div key={index} className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}>
                <img 
                  className="message-avatar" 
                  src={message.sender === 'user' ? assets.user_icon : assets.bot_icon} 
                  alt={message.sender === 'user' ? 'User' : 'Bot'} 
                />
                <div className="message-content">
                  {message.file && message.file.preview && (
                    <div className="file-preview">
                      <img src={message.file.preview} alt="Uploaded file" />
                    </div>
                  )}
                  {message.file && !message.file.preview && (
                    <div className="file-attachment">
                      <span className="file-name">{message.file.name}</span>
                    </div>
                  )}
                  <p>{message.text}</p>
                  <span className="timestamp">
                    {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </span>
                </div>
              </div>
            ))}
            {loading && (
              <div className="message bot-message">
                <img className="message-avatar" src={assets.bot_icon} alt="Bot" />
                <div className="message-content">
                  <p>Thinking...</p>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
        )}
        <div className="main-bottom">
          <div className="search-box">
            {selectedFile && (
              <div className="selected-file">
                <span>{selectedFile.name}</span>
                <button onClick={() => setSelectedFile(null)}>✕</button>
              </div>
            )}
            <input 
              type="text" 
              placeholder="Enter your Queries" 
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
            />
            <div>
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                style={{ display: 'none' }}
                accept="image/*,.pdf,.doc,.docx,.txt"
              />
              <img 
                src={assets.gallery_icon} 
                alt="Upload" 
                onClick={handleFileSelect}
                className={selectedFile ? 'active' : ''}
              />
              <img 
                src={assets.mic_icon} 
                alt="Microphone" 
                onClick={toggleSpeechRecognition}
                className={isRecording ? 'active pulse' : ''}
              />
              <img 
                src={assets.send_icon} 
                alt="Send" 
                onClick={handleSendMessage}
                style={{ cursor: 'pointer' }}
              />
            </div>
          </div>
          <p className="bottom-info">
            Since this is a BETA version, SGSU Bot may display inaccurate info, so please double-check its responses or you can visit the <a target="_blank" href="https://sgsuniversity.ac.in/">Official SGSU Website</a>
          </p>
        </div>
      </div>
    </div>  
  );
};

export default Main;

This is the Main.css file :-

.main{
    flex: 1;
    min-height: 100vh;
    padding-bottom: 15vh;
    position: relative;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.main.dark-mode {
    background-color: #1f2937;
    color: #e5e7eb;
}

.main .nav{
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 22px;
    padding: 20px;
    color: #585858;
    transition: color 0.3s ease;
}

.main.dark-mode .nav {
    color: #e5e7eb;
}

.main .nav img{
    width: 45px;
    border-radius: 50%;
}

.main-container{
    max-width: 900px;
    margin: auto;
}

.main .greet{
    margin: 50px 0px;
    font-size: 50px;
    color: #c4c7c5;
    font-weight: 500;
    padding: 20px;
    animation: fadeIn 0.5s ease-in-out;
}

.main .greet span{
    background: -webkit-linear-gradient(16deg,#4b90ff,#ff5546);
    background-clip: text;
    -webkit-text-fill-color: transparent;
}

.main .cards{
    display: grid;
    grid-template-columns: repeat(auto-fill,minmax(180px,1fr));
    gap: 15px;
    padding: 20px;
    animation: slideUp 0.5s ease-in-out;
} 

.main .card{
    height: 200px;
    padding: 10px;
    background-color: #f0f4f9;
    border-radius: 10px;
    position: relative;
    cursor: pointer;
    transition: transform 0.3s ease, background-color 0.3s ease;
} 

.main.dark-mode .card {
    background-color: #374151;
    color: #e5e7eb;
}

.main .card img{
    width: 35px;
    padding: 5px;
    position: absolute;
    background-color: white;
    border-radius: 10px;
    bottom: 10px;
    right: 15px;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.main.dark-mode .card img {
    background-color: #4b5563;
}

.main .card p{
    color: #585858;
    font-size: 16px;
    transition: color 0.3s ease;
}

.main.dark-mode .card p {
    color: #e5e7eb;
}

.main .card:hover{
    background-color: #dfe4ea;
    transform: translateY(-5px);
}

.main.dark-mode .card:hover {
    background-color: #4b5563;
}

.messages-container {
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 20px;
    margin-bottom: 20px;
    height: calc(100vh - 250px);
    overflow-y: auto;
    animation: fadeIn 0.5s ease-in-out;
}

.message {
    display: flex;
    gap: 15px;
    padding: 15px;
    border-radius: 10px;
    max-width: 80%;
    word-wrap: break-word;
    animation: slideInMessage 0.3s ease-in-out;
    transition: background-color 0.3s ease;
}

.message.user-message {
    align-self: flex-end;
    background-color: #e6f2ff;
    margin-left: auto;
}

.main.dark-mode .message.user-message {
    background-color: #3b82f6;
    color: white;
}

.message.bot-message {
    align-self: flex-start;
    background-color: #f5f5f5;
    margin-right: auto;
}

.main.dark-mode .message.bot-message {
    background-color: #374151;
    color: #e5e7eb;
}

.message-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
}

.message-content {
    flex: 1;
}

.message-content p {
    margin: 0;
    line-height: 1.5;
}

.timestamp {
    font-size: 12px;
    color: #888;
    margin-top: 5px;
    display: block;
}

.main.dark-mode .timestamp {
    color: #9ca3af;
}

.main-bottom{
    position: absolute;
    bottom: 0;
    width: 100%;
    max-width: 900px;
    padding: 0px 20px;
    margin: auto;
    background-color: white;
    transition: background-color 0.3s ease;
}

.main.dark-mode .main-bottom {
    background-color: #1f2937;
}

.search-box{
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 20px;
    background-color: #f0f4f9;
    padding: 10px 20px;
    border-radius: 50px;
    transition: background-color 0.3s ease;
}

.main.dark-mode .search-box {
    background-color: #374151;
}

.search-box img{
    width: 24px;
    cursor: pointer;
    border-width: 100%;
    transition: transform 0.2s ease, background-color 0.2s ease;
    padding: 5px;
    border-radius: 50%;
}

.search-box img:hover{
    background-color: #e2e6eb;
    border-radius: 50%;
    transform: scale(1.1);
}

.main.dark-mode .search-box img:hover {
    background-color: #4b5563;
}

.search-box img.active {
    background-color: rgba(0, 98, 255, 0.2);
}

.search-box img.pulse {
    animation: pulse 1.5s infinite;
}

.search-box input{
    flex: 1;
    background: transparent;
    border: none;
    outline: none;
    padding: 8px;
    font-size: 18px;
    color: inherit;
}

.search-box div{
    display: flex;
    align-items: center;
    gap: 12px;
}

.main .bottom-info{
    font-size: 13px;
    margin: 15px auto;
    text-align: center;
    font-weight: 300;
    transition: color 0.3s ease;
}

.main.dark-mode .bottom-info {
    color: #9ca3af;
}

.main .bottom-info a{
    color: #0062ff;
    text-decoration: none;
    transition: color 0.3s ease;
} 

.main.dark-mode .bottom-info a {
    color: #60a5fa;
}

.selected-file {
    display: flex;
    align-items: center;
    gap: 8px;
    background-color: rgba(0, 98, 255, 0.1);
    padding: 4px 8px;
    border-radius: 15px;
    font-size: 14px;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.main.dark-mode .selected-file {
    background-color: rgba(59, 130, 246, 0.2);
}

.selected-file button {
    background: none;
    border: none;
    cursor: pointer;
    color: #585858;
    font-size: 14px;
    padding: 0 4px;
}

.main.dark-mode .selected-file button {
    color: #e5e7eb;
}

.file-preview {
    margin-bottom: 10px;
    border-radius: 8px;
    overflow: hidden;
    max-width: 300px;
}

.file-preview img {
    width: 100%;
    object-fit: cover;
}

.file-attachment {
    display: inline-block;
    background-color: rgba(0, 98, 255, 0.1);
    padding: 4px 8px;
    border-radius: 15px;
    font-size: 14px;
    margin-bottom: 8px;
}

.main.dark-mode .file-attachment {
    background-color: rgba(59, 130, 246, 0.2);
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slideUp {
    from { transform: translateY(20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

@keyframes slideInMessage {
    from { transform: translateY(10px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

@keyframes pulse {
    0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(0, 98, 255, 0.4); }
    70% { transform: scale(1.1); box-shadow: 0 0 0 10px rgba(0, 98, 255, 0); }
    100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(0, 98, 255, 0); }
}

/* Activity Section Styles */
.activity-container {
    padding: 20px;
    max-width: 900px;
    margin: 0 auto;
    animation: fadeIn 0.5s ease-in-out;
}

.activity-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 20px;
}

.activity-header h1 {
    font-size: 28px;
    color: #585858;
    transition: color 0.3s ease;
}

.main.dark-mode .activity-header h1 {
    color: #e5e7eb;
}

.activity-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.activity-item {
    background-color: #f5f5f5;
    padding: 15px;
    border-radius: 10px;
    position: relative;
    animation: slideUp 0.5s ease-in-out;
    transition: background-color 0.3s ease, transform 0.3s ease;
}

.main.dark-mode .activity-item {
    background-color: #374151;
}

.activity-item:hover {
    transform: translateY(-3px);
}

.activity-time {
    font-size: 14px;
    color: #888;
    margin-bottom: 5px;
    transition: color 0.3s ease;
}

.main.dark-mode .activity-time {
    color: #9ca3af;
}

.activity-query {
    font-weight: 500;
    margin-bottom: 8px;
    transition: color 0.3s ease;
}

.main.dark-mode .activity-query {
    color: #e5e7eb;
}

.activity-response {
    font-size: 14px;
    color: #555;
    transition: color 0.3s ease;
}

.main.dark-mode .activity-response {
    color: #d1d5db;
}

.activity-delete {
    position: absolute;
    top: 10px;
    right: 10px;
    cursor: pointer;
    padding: 5px;
    border-radius: 50%;
    transition: background-color 0.2s ease;
}

.activity-delete:hover {
    background-color: rgba(0, 0, 0, 0.1);
}

.main.dark-mode .activity-delete:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

/* Settings Section Styles */
.settings-container {
    padding: 20px;
    max-width: 900px;
    margin: 0 auto;
    animation: fadeIn 0.5s ease-in-out;
}

.settings-header {
    margin-bottom: 30px;
}

.settings-header h1 {
    font-size: 28px;
    color: #585858;
    transition: color 0.3s ease;
}

.main.dark-mode .settings-header h1 {
    color: #e5e7eb;
}

.settings-section {
    background-color: #f5f5f5;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    animation: slideUp 0.5s ease-in-out;
    transition: background-color 0.3s ease;
}

.main.dark-mode .settings-section {
    background-color: #374151;
}

.settings-section h2 {
    font-size: 20px;
    margin-bottom: 15px;
    color: #333;
    transition: color 0.3s ease;
}

.main.dark-mode .settings-section h2 {
    color: #f3f4f6;
}

.theme-toggle {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-top: 15px;
}

.toggle-switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
}

.toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 34px;
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .toggle-slider {
    background-color: #0062ff;
}

input:checked + .toggle-slider:before {
    transform: translateX(26px);
}

/* Help Section Styles */
.university-info-container {
    padding: 20px;
    max-width: 900px;
    margin: 0 auto;
    animation: fadeIn 0.5s ease-in-out;
}

.university-info-header {
    margin-bottom: 30px;
}

.university-info-header h1 {
    font-size: 28px;
    color: #585858;
    transition: color 0.3s ease;
}

.main.dark-mode .university-info-header h1 {
    color: #e5e7eb;
}

.university-info-section {
    background-color: #f5f5f5;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    animation: slideUp 0.5s ease-in-out;
    transition: background-color 0.3s ease;
}

.main.dark-mode .university-info-section {
    background-color: #374151;
}

.university-info-section h2 {
    font-size: 20px;
    margin-bottom: 15px;
    color: #333;
    transition: color 0.3s ease;
}

.main.dark-mode .university-info-section h2 {
    color: #f3f4f6;
}

.university-info-section p {
    line-height: 1.6;
    margin-bottom: 10px;
    color: #555;
    transition: color 0.3s ease;
}

.main.dark-mode .university-info-section p {
    color: #d1d5db;
}

This is the UniversityInfo.jsx file :-

import React from 'react';

const UniversityInfo = () => {
  return (
    <div className="university-info-container">
      <div className="university-info-header">
        <h1>About Scope Global Skills University</h1>
      </div>
      
      <div className="university-info-section">
        <h2>Our Mission</h2>
        <p>
          Scope Global Skills University (SGSU) is committed to providing quality education that develops industry-ready professionals. We focus on blending theoretical knowledge with practical skills to prepare students for the challenges of the modern workplace.
        </p>
      </div>
      
      <div className="university-info-section">
        <h2>Our Vision</h2>
        <p>
          To be a globally recognized institution of excellence in higher education, fostering innovation, critical thinking, and ethical leadership to address the evolving needs of society and industry.
        </p>
      </div>
      
      <div className="university-info-section">
        <h2>Academic Programs</h2>
        <p>
          SGSU offers a diverse range of undergraduate, postgraduate, and doctoral programs across various disciplines including Engineering, Management, Computer Applications, Science, Arts, Commerce, Education, and more.
        </p>
      </div>
      
      <div className="university-info-section">
        <h2>Campus Facilities</h2>
        <p>
          Our state-of-the-art campus features modern classrooms, well-equipped laboratories, a comprehensive library, sports facilities, hostels, and cafeterias to ensure a conducive learning environment.
        </p>
      </div>
      
      <div className="university-info-section">
        <h2>Contact Information</h2>
        <p>
          Address: Scope Global Skills University, Bhopal, Madhya Pradesh<br />
          Phone: +91-7552432903<br />
          Email: info@sgsuniversity.ac.in<br />
          Website: <a href="https://sgsuniversity.ac.in/" target="_blank" rel="noopener noreferrer">https://sgsuniversity.ac.in/</a>
        </p>
      </div>
    </div>
  );
};

export default UniversityInfo;

This is the ActivityLog.jsx file :-

import React, { useState, useEffect } from 'react';
import { assets } from '../../assets/assets';

const ActivityLog = () => {
  const [activityLog, setActivityLog] = useState([]);
  
  // Load activity log from localStorage on component mount
  useEffect(() => {
    const savedLog = JSON.parse(localStorage.getItem('activityLog')) || [];
    setActivityLog(savedLog);
  }, []);
  
  // Format the timestamp to a readable date and time
  const formatTimestamp = (timestamp) => {
    const date = new Date(timestamp);
    return `${date.toLocaleDateString()} at ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
  };
  
  // Delete an activity entry
  const deleteActivity = (index) => {
    const updatedLog = [...activityLog];
    updatedLog.splice(index, 1);
    setActivityLog(updatedLog);
    localStorage.setItem('activityLog', JSON.stringify(updatedLog));
  };
  
  return (
    <div className="activity-container">
      <div className="activity-header">
        <h1>Activity History</h1>
      </div>
      
      {activityLog.length === 0 ? (
        <div className="empty-state">
          <p>You haven't had any conversations yet.</p>
        </div>
      ) : (
        <div className="activity-list">
          {activityLog.map((activity, index) => (
            <div key={index} className="activity-item">
              <div className="activity-time">{formatTimestamp(activity.timestamp)}</div>
              <div className="activity-query">{activity.query}</div>
              <div className="activity-response">{activity.response.length > 150 ? activity.response.substring(0, 150) + '...' : activity.response}</div>
              <div className="activity-delete" onClick={() => deleteActivity(index)}>
                <img src={assets.delete_icon} alt="Delete" width="18" />
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default ActivityLog;

This is the Settings.jsx file :-

import React from 'react';

const Settings = ({ darkMode, setDarkMode }) => {
  const toggleDarkMode = () => {
    const newMode = !darkMode;
    setDarkMode(newMode);
    localStorage.setItem('darkMode', JSON.stringify(newMode));
    
    // Apply dark mode to body as well
    if (newMode) {
      document.body.classList.add('dark-mode');
    } else {
      document.body.classList.remove('dark-mode');
    }
  };
  
  return (
    <div className="settings-container">
      <div className="settings-header">
        <h1>Settings</h1>
      </div>
      
      <div className="settings-section">
        <h2>Appearance</h2>
        <div className="theme-toggle">
          <span>Light Mode</span>
          <label className="toggle-switch">
            <input 
              type="checkbox" 
              checked={darkMode} 
              onChange={toggleDarkMode}
            />
            <span className="toggle-slider"></span>
          </label>
          <span>Dark Mode</span>
        </div>
      </div>
      
      <div className="settings-section">
        <h2>About</h2>
        <p>SGSU Bot BETA</p>
        <p>Version: 1.0.0</p>
        <p>This is a university chatbot powered by Gemini API.</p>
      </div>
    </div>
  );
};

export default Settings;

This is the App.jsx file :-

import { useState, useEffect } from 'react';
import Sidebar from './components/Sidebar/Sidebar';
import Main from './components/Main/Main';
import axios from "axios";

function App() {
  const [isServerRunning, setIsServerRunning] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [activeSection, setActiveSection] = useState('chat');
  const [chatHistory, setChatHistory] = useState([]);
  const [currentChat, setCurrentChat] = useState(null);

  // Check if server is running
  useEffect(() => {
    const checkServer = async () => {
      try {
        const response = await axios.get("http://127.0.0.1:5000/");
        if (response.data.status === "Server is running") {
          setIsServerRunning(true);
        }
      } catch (error) {
        console.error("Server check failed:", error);
        setIsServerRunning(false);
      }
    };

    checkServer();
  }, []);

  // Load dark mode preference from localStorage
  useEffect(() => {
    const savedDarkMode = JSON.parse(localStorage.getItem('darkMode'));
    if (savedDarkMode !== null) {
      setDarkMode(savedDarkMode);
      if (savedDarkMode) {
        document.body.classList.add('dark-mode');
      }
    }
  }, []);

  // Load current chat from localStorage
  useEffect(() => {
    const savedChat = JSON.parse(localStorage.getItem('currentChat'));
    if (savedChat) {
      setCurrentChat(savedChat);
      setChatHistory(savedChat.messages || []);
    } else {
      // Create a new chat if none exists
      const newChat = {
        id: Date.now(),
        title: 'New Chat',
        messages: [],
        timestamp: new Date().toISOString()
      };
      setCurrentChat(newChat);
      
      // Save to localStorage
      localStorage.setItem('currentChat', JSON.stringify(newChat));
      
      // Add to chat history if not already there
      const savedChats = JSON.parse(localStorage.getItem('chatHistory')) || [];
      if (!savedChats.some(chat => chat.id === newChat.id)) {
        localStorage.setItem('chatHistory', JSON.stringify([newChat, ...savedChats]));
      }
    }
  }, []);

  return (
    <div className={darkMode ? 'app dark-mode' : 'app'}>
      <Sidebar 
        setChatHistory={setChatHistory}
        setCurrentChat={setCurrentChat}
        setActiveSection={setActiveSection}
        darkMode={darkMode}
        setDarkMode={setDarkMode}
      />
      <Main 
        activeSection={activeSection}
        chatHistory={chatHistory}
        setChatHistory={setChatHistory}
        currentChat={currentChat}
        setCurrentChat={setCurrentChat}
        darkMode={darkMode}
        setDarkMode={setDarkMode}
      />
      {!isServerRunning && (
        <div style={{
          position: 'fixed',
          bottom: '20px',
          left: '50%',
          transform: 'translateX(-50%)',
          backgroundColor: '#f44336',
          color: 'white',
          padding: '10px 20px',
          borderRadius: '50px',
          zIndex: 1000
        }}>
          Server is not running. Please start the Flask server.
        </div>
      )}
    </div>
  );
}

export default App;

So, these are the files that I've Adjusted myself, and I don't want you to make any changes in it, what I want is to make the Adjustments in these files according to the above files 

Here are the files that you have to Improve According to the above files 

This is the main.py file :-

from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import google.generativeai as genai
from dotenv import load_dotenv

app = Flask(__name__)
CORS(app)  

class GeminiClient:
    def __init__(self):
        load_dotenv()
        genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

        self.chancellor_info = self._load_file_content('bot_api/data/cm.txt')
        self.vice_chancellor_info = self._load_file_content('bot_api/data/vc.txt')
        self.registrar_info = self._load_file_content('bot_api/data/rm.txt')

        generation_config = {
            "temperature": 1,
            "top_p": 0.95,
            "top_k": 40,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        }
        
        system_instruction = f"""
        You are an AI assistant for Scope Global Skills University (SGSU), Bhopal, Madhya Pradesh.
        Your job is to provide clear, professional, and helpful answers to students, faculty, and prospective students.
        Always answer based on university policies, university information, admission criteria, course details,
        contact details(in numbers as well(+91-7552432903, info@sgsuniversity.ac.in)), 
        
        Here is information about the Chancellor (Dr. Siddharth Chaturvedi):
        {self.chancellor_info}
        
        Here is information about the Vice Chancellor (Dr. Vijay Singh):
        {self.vice_chancellor_info}
        
        Here is information about the Registrar (Dr. Sitesh Kumar Sinha):
        {self.registrar_info}
        
        If you don't know something, politely suggest contacting the university administration.
        And You are an AI assistant for Scope Global Skills University, 
        So if anyone asks questions apart from the University enquiries,
        So Please Politely say that I am an AI assistant for Scope Global Skills University (SGSU), Bhopal, Madhya Pradesh.
        I am trained to Provide Information specifically about the University.  
        """
        
        self.model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config=generation_config,
            system_instruction=system_instruction
        )
        
        self.history = []
    
    def _load_file_content(self, file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        except FileNotFoundError:
            return f"Information file not found: {file_path}"
    
    def get_response(self, user_message):
        try:
            chat_session = self.model.start_chat(history=self.history)
            response = chat_session.send_message(user_message)
            model_response = response.text

            self.history.append({"role": "user", "parts": [user_message]})
            self.history.append({"role": "model", "parts": [model_response]})

            if len(self.history) > 20:
                self.history = self.history[-20:]
                
            return {"response": model_response}
        except Exception as e:
            return {"error": str(e)}
    
    def clear_history(self):
        self.history = []
        return {"status": "History cleared"}

gemini_client = GeminiClient()

@app.route('/')
def home():
    return jsonify({"status": "Server is running"})

@app.route('/api/chat', methods=['POST'])
def chat():
    data = request.json
    if not data or 'message' not in data:
        return jsonify({"error": "No message provided"}), 400
    
    result = gemini_client.get_response(data['message'])
    return jsonify(result)

@app.route('/api/clear-history', methods=['POST'])
def clear_history():
    result = gemini_client.clear_history()
    return jsonify(result)

@app.route('/api/history', methods=['GET'])
def get_history():
    return jsonify({"history": gemini_client.history})

if __name__ == '__main__':
    app.run(debug=True)


So, these are the files that I've to adjust according to the above files and tell me what dependencies or tools that I've to install, tell me how to install it and give me the file directory structure