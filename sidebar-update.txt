import React, { useState, useEffect } from 'react';
import './Sidebar.css';
import { assets } from '../../assets/assets';
import axios from 'axios';
import { motion, AnimatePresence } from 'framer-motion';

const Sidebar = ({ onNewChat, darkMode, toggleDarkMode }) => {
  const [extended, setExtended] = useState(false);
  const [recentChats, setRecentChats] = useState([]);
  const [isEditing, setIsEditing] = useState(null);
  const [editValue, setEditValue] = useState('');
  const [activeSection, setActiveSection] = useState(null);
  const [promptHistory, setPromptHistory] = useState([]);
  
  // Fetch recent chats from localStorage on component mount
  useEffect(() => {
    const savedChats = JSON.parse(localStorage.getItem('recentChats')) || [];
    setRecentChats(savedChats);
    
    const savedHistory = JSON.parse(localStorage.getItem('promptHistory')) || [];
    setPromptHistory(savedHistory);
  }, []);

  // Save chats to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('recentChats', JSON.stringify(recentChats));
  }, [recentChats]);
  
  // Save prompt history to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem('promptHistory', JSON.stringify(promptHistory));
  }, [promptHistory]);

  // Function to handle new chat creation
  const handleNewChat = () => {
    const newChat = {
      id: Date.now(),
      title: `New Chat ${recentChats.length + 1}`,
      messages: []
    };
    
    setRecentChats(prev => [newChat, ...prev]);
    onNewChat(newChat.id);
    setExtended(true);
  };

  // Function to handle chat selection
  const handleChatSelect = (chatId) => {
    onNewChat(chatId);
  };

  // Function to start editing chat title
  const startEditing = (chat) => {
    setIsEditing(chat.id);
    setEditValue(chat.title);
  };

  // Function to save edited chat title
  const saveEditedTitle = () => {
    if (editValue.trim() === '') return;
    
    setRecentChats(prev => 
      prev.map(chat => 
        chat.id === isEditing 
          ? { ...chat, title: editValue } 
          : chat
      )
    );
    
    setIsEditing(null);
  };

  // Function to delete chat
  const deleteChat = (chatId, e) => {
    e.stopPropagation();
    setRecentChats(prev => prev.filter(chat => chat.id !== chatId));
  };

  // Function to handle keypress in edit mode
  const handleEditKeyPress = (e) => {
    if (e.key === 'Enter') {
      saveEditedTitle();
    }
  };

  // Function to delete prompt from history
  const deletePrompt = (promptId) => {
    setPromptHistory(prev => prev.filter(prompt => prompt.id !== promptId));
  };

  // Function to show About the University
  const showHelp = () => {
    setActiveSection(activeSection === 'help' ? null : 'help');
  };

  // Function to show Activity/Prompt History
  const showActivity = () => {
    setActiveSection(activeSection === 'activity' ? null : 'activity');
  };

  // Function to show Settings
  const showSettings = () => {
    setActiveSection(activeSection === 'settings' ? null : 'settings');
  };

  return (
    <div className={`sidebar ${extended ? 'extended' : 'collapsed'} ${darkMode ? 'dark-mode' : ''}`}>
      <div className="top">
        <img 
          onClick={() => setExtended(prev => !prev)} 
          className="menu" 
          src={assets.menu_icon} 
          alt=""
        />
        <div className="new-chat" onClick={handleNewChat}>
          <img src={assets.plus_icon} alt="New Chat" />
          {extended && <p>New Chat</p>}
        </div>
        
        <AnimatePresence>
          {extended && (
            <motion.div 
              className="recent"
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
            >
              <p className="recent-title">Recent</p>
              {recentChats.length === 0 ? (
                <p className="no-chats">No recent chats</p>
              ) : (
                recentChats.map(chat => (
                  <div 
                    key={chat.id} 
                    className="recent-entry" 
                    onClick={() => handleChatSelect(chat.id)}
                  >
                    <img src={assets.message_icon} alt="" />
                    {isEditing === chat.id ? (
                      <input
                        type="text"
                        value={editValue}
                        onChange={(e) => setEditValue(e.target.value)}
                        onBlur={saveEditedTitle}
                        onKeyPress={handleEditKeyPress}
                        autoFocus
                        className="edit-title"
                      />
                    ) : (
                      <p>{chat.title}</p>
                    )}
                    <div className="chat-actions">
                      {isEditing !== chat.id && (
                        <>
                          <img 
                            src={assets.edit_icon} 
                            alt="Edit" 
                            onClick={(e) => {
                              e.stopPropagation();
                              startEditing(chat);
                            }}
                            className="action-icon"
                          />
                          <img 
                            src={assets.delete_icon} 
                            alt="Delete" 
                            onClick={(e) => deleteChat(chat.id, e)}
                            className="action-icon"
                          />
                        </>
                      )}
                    </div>
                  </div>
                ))
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </div>
      
      <div className="bottom">
        <div 
          className={`bottom-item recent-entry ${activeSection === 'help' ? 'active' : ''}`}
          onClick={showHelp}
        >
          <img src={assets.question_icon} alt="Help" />
          {extended && <p>Help</p>}
        </div>
        
        <AnimatePresence>
          {extended && activeSection === 'help' && (
            <motion.div 
              className="sidebar-content"
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
            >
              <div className="university-info">
                <h3>About SGSU</h3>
                <p>Scope Global Skills University (SGSU) is located in Bhopal, Madhya Pradesh.</p>
                <p>SGSU is committed to providing quality education and skill development to students.</p>
                <p>Contact: +91-7552432903, info@sgsuniversity.ac.in</p>
                <p>For more information, visit the <a href="https://sgsuniversity.ac.in/" target="_blank" rel="noopener noreferrer">official website</a>.</p>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
        
        <div 
          className={`bottom-item recent-entry ${activeSection === 'activity' ? 'active' : ''}`}
          onClick={showActivity}
        >
          <img src={assets.history_icon} alt="Activity" />
          {extended && <p>Activity</p>}
        </div>
        
        <AnimatePresence>
          {extended && activeSection === 'activity' && (
            <motion.div 
              className="sidebar-content"
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
            >
              <div className="prompt-history">
                <h3>Prompt History</h3>
                {promptHistory.length === 0 ? (
                  <p>No prompt history</p>
                ) : (
                  promptHistory.map(prompt => (
                    <div key={prompt.id} className="prompt-entry">
                      <div className="prompt-info">
                        <p className="prompt-text">{prompt.text}</p>
                        <p className="prompt-date">{new Date(prompt.timestamp).toLocaleString()}</p>
                      </div>
                      <img 
                        src={assets.delete_icon} 
                        alt="Delete" 
                        onClick={() => deletePrompt(prompt.id)}
                        className="action-icon"
                      />
                    </div>
                  ))
                )}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
        
        <div 
          className={`bottom-item recent-entry ${activeSection === 'settings' ? 'active' : ''}`}
          onClick={showSettings}
        >
          <img src={assets.setting_icon} alt="Settings" />
          {extended && <p>Settings</p>}
        </div>
        
        <AnimatePresence>
          {extended && activeSection === 'settings' && (
            <motion.div 
              className="sidebar-content"
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
            >
              <div className="settings">
                <h3>Settings</h3>
                <div className="setting-item">
                  <p>Dark Mode</p>
                  <label className="switch">
                    <input 
                      type="checkbox" 
                      checked={darkMode} 
                      onChange={toggleDarkMode}
                    />
                    <span className="slider round"></span>
                  </label>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default Sidebar;